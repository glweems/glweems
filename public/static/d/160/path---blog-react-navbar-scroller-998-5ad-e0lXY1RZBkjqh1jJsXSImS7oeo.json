{"data":{"markdownRemark":{"html":"<h1>Simple navbar component using react, typescript, and styled-components.</h1>\n<p>In this project we will create a simple little Navbar component that has a logo or brand name and features horizontal scrolling.</p>\n<p><img src=\"https://raw.githubusercontent.com/gwtuts/react-navbar-scroller/master/demo.gif\"></p>\n<p><a href=\"https://react-navbar-scroller.now.sh/\">working demo</a>\n<a href=\"https://github.com/gwtuts\">source code</a></p>\n<hr>\n<h3>Setup.</h3>\n<p>The setup for a react app in <code>TypeScript</code> is almost the exact same if you’re already using <code></code>create-react-app`<code></code>cli for your react applications.</p>\n<pre><code>npx create-react-app NavbarScrollerDemo --typescript\n</code></pre>\n<p>If you don’t already have the create-react-app cli run this script first</p>\n<pre><code>npm install -g create-react-app\n</code></pre>\n<h4>Optional</h4>\n<p>Before you get up and running I would recommend you installing the TSLint prettier plugin to keep things nice and tidy.</p>\n<pre><code>npm install --save-dev tslint-config-prettier\n</code></pre>\n<p>Then create a  <code>tslint.json</code> file in your root directory and add the following.</p>\n<pre><code class=\"language-js\">// tslint.json\n{\n  \"extends\": [\n    \"tslint:latest\",\n    \"tslint-config-prettier\"\n  ]\n}\n</code></pre>\n<h3>Getting Started</h3>\n<p>After you run the  <code>create-react-app NavbarScrollerDemo --typescript</code> you should end up with a folder structure like so.</p>\n<pre><code>NavbarScrollerDemo/\n├─ .gitignore\n├─ node_modules/\n├─ public/\n├─ src/\n | — — index.tsx\n | — — registerServiceWorker.ts\n | — — logo.svg\n | — — App.tsx\n | — — App.test.tsx\n | — — App.css\n | — — index.css\n | — — assets/\n├─ package.json\n├─ tsconfig.json\n├─ tsconfig.test.json\n└─ tslint.json\n</code></pre>\n<p>Open your <code>App.tsx</code> file and delete all the junk so it looks like this</p>\n<pre><code class=\"language-js\">import React, { Component } from 'react';\n\nclass App extends Component {\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n\n      &#x3C;/div>\n    );\n  }\n}\n\nexport default App;\n</code></pre>\n<p>Now we’re going to install another dependency to reset our browsers css.</p>\n<p><code>npm install reset-css --save</code></p>\n<p>Now add the package to your  <code>App.tsx</code></p>\n<pre><code class=\"language-js\">// App.tsx\nimport React, { Component } from 'react';\nimport 'reset-css'\n</code></pre>\n<p><em>if you get an error saying module cannot be found you may need to add the package postcss-import</em> <code>npm install postcss-import --save</code></p>\n<p>With that out of the way lets start creating the component.</p>\n<p>Create a new <code>components/</code> directory in <code>./src/components/</code> and create a new <code>NavbarScroller.tsx</code> file.</p>\n<pre><code class=\"language-js\">// ./src/components/NavbarScroller.tsx\n\nimport * as React from 'react'\n\nconst NavbarScroller = () => {\n  return (\n    &#x3C;div>\n\n    &#x3C;/div>\n  )\n}\n\nexport default NavbarScroller\n</code></pre>\n<p>Import the component in your <code>App.tsx</code></p>\n<pre><code class=\"language-js\">// App.tsx\n\nimport NavbarScroller from './components/NavbarScroller';\n\n// ...\n\nreturn (&#x3C;div className=\"App\">\n            &#x3C;NavbarScroller />\n        &#x3C;/div>);\n</code></pre>\n<p>Now create a <code>navigation</code> object in your <code>App.tsx</code>. This will be the data we use that gets sent to the component and rendered.</p>\n<pre><code class=\"language-js\">// App.tsx\nconst navigation = {\n  brand: { name: \"NavbarScroller\", to: \"/\" },\n  links: [\n    { name: \"About Me\", to: \"/about\" },\n    { name: \"Blog\", to: \"/blog\" },\n    { name: \"Developement\", to: \"/dev\" },\n    { name: \"Graphic Design\", to: \"/design\" },\n    { name: \"Contact\", to: \"/contact\" },\n  ]\n}\n</code></pre>\n<p>Now pass the object into our component as props.</p>\n<pre><code class=\"language-js\">// App.tsx\nexport default class App extends Component {\n  // the 'public' is a typescript feature.\n  public render() {\n\n    // Descructured object for cleaner code :-)\n    const { brand, links } = navigation;\n\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;NavbarScroller brand={brand} links={links} />\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<p>From here unfortunately you will get an error. But that’s just typescript doing it thing.</p>\n <div style=\"position: relative; display: inline-flex; flex-direction: column; height: 100%; width: 1024px; max-width: 100%; overflow-x: hidden; overflow-y: auto; padding: 0.5rem; box-sizing: border-box; text-align: left; font-family: Consolas, Menlo, monospace; font-size: 11px; white-space: pre-wrap; word-break: break-word; line-height: 1.5; color: rgb(41, 50, 56);\"><div style=\"font-size: 2em; font-family: sans-serif; color: rgb(206, 17, 38); white-space: pre-wrap; margin: 0px 2rem 0.75rem 0px; flex: 0 0 auto; max-height: 50%; overflow: auto;\">Failed to compile</div><div><pre style=\"position: relative; display: block; padding: 0.5em; margin-top: 0.5em; margin-bottom: 0.5em; overflow-x: auto; white-space: pre-wrap; border-top-left-radius: 0.25rem; border-top-right-radius: 0.25rem; border-bottom-right-radius: 0.25rem; border-bottom-left-radius: 0.25rem; background-color: rgba(206, 17, 38, 0.0470588);\"><code style=\"font-family: Consolas, Menlo, monospace;\"><span data-ansi-line=\"true\"><span>/Users/gw/gwtuts/gw-components/src/App.tsx</span></span><br><span data-ansi-line=\"true\"><span></span><span style=\"color: #881280;\"></span><span style=\"color: #881280;\">TypeScript error: </span><span style=\"color: #881280;\"></span><span>Type '{ brand: { name: string; to: string; }; links: { name: string; to: string; }[]; }' is not assignable to type 'IntrinsicAttributes'.</span></span><br><span data-ansi-line=\"true\"><span>  Property 'brand' does not exist on type 'IntrinsicAttributes'.  </span><span style=\"color: #881280;\"></span><span style=\"color: #881280;\">TS2322</span><span style=\"color: #881280;\"></span><span></span></span><br><span data-ansi-line=\"true\"><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\"> 25 | </span><span>    </span><span style=\"color: #c80000;\">return</span><span> (</span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\"> 26 | </span><span>      </span><span style=\"color: #881280;\">&lt;</span><span></span><span style=\"color: #881280;\">div</span><span> className</span><span style=\"color: #881280;\">=</span><span></span><span style=\"color: #1155cc;\">\"App\"</span><span></span><span style=\"color: #881280;\">&gt;</span><span></span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span></span><span style=\"color: #881280;\"></span><span style=\"color: #881280;\">&gt;</span><span style=\"color: #881280;\"></span><span></span><span style=\"color: #333333;\"> 27 | </span><span>        </span><span style=\"color: #881280;\">&lt;</span><span></span><span style=\"color: #881280;\">NavbarScroller</span><span> brand</span><span style=\"color: #881280;\">=</span><span>{brand} links</span><span style=\"color: #881280;\">=</span><span>{links} </span><span style=\"color: #881280;\">/</span><span></span><span style=\"color: #881280;\">&gt;</span><span></span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\">    | </span><span>         </span><span style=\"color: #881280;\"></span><span style=\"color: #881280;\">^</span><span style=\"color: #881280;\"></span><span></span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\"> 28 | </span><span>      </span><span style=\"color: #881280;\">&lt;</span><span></span><span style=\"color: #881280;\">/</span><span></span><span style=\"color: #881280;\">div</span><span></span><span style=\"color: #881280;\">&gt;</span><span></span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\"> 29 | </span><span>    )</span><span style=\"color: #881280;\">;</span><span></span><span></span></span><br><span data-ansi-line=\"true\"><span>  </span><span> </span><span style=\"color: #333333;\"> 30 | </span><span>  }</span><span></span></span></code></pre></div><div style=\"font-family: sans-serif; color: rgb(135, 142, 145); margin-top: 0.5rem; flex: 0 0 auto;\">This error occurred during the build time and cannot be dismissed.<br></div></div>\n<p>We can fix this by defining the types of props we’re sending to the component.\nGet it … types… typescript</p>\n<p>If we wanted to, we could simple clear the error by setting out props to any.</p>\n<pre><code class=\"language-js\">// NavbarScroller.tsx\n\nconst NavbarScroller = (props: any) => {\n  // this completely defeats the purpose of using typescipt\n  return (\n    &#x3C;div>\n      &#x3C;p>NavbarScroller&#x3C;/p>\n    &#x3C;/div>\n  )\n}\n\nexport default NavbarScroller\n</code></pre>\n<p>I’m not saying that you might not ever need to use  <code>any</code> to defend you type of for our situation we know we’re going to be sending two different props.</p>\n<ol>\n<li>The  <code>brand</code> object that contains two different properties <code>name, to</code> these are both strings and even if their value changes. The variable type should still always be an <code>object</code> with two values that are  <code>name</code> and <code>to</code>.</li>\n<li>The <code>links</code> array is same object as our <code>brand</code> but in an array. And it should always retain that structure.</li>\n</ol>\n<p>First let’s just tell TypeScript that the props are an object.</p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: {}) => {...}\n</code></pre>\n<p>Now that we have defended the object lets add the <code>brand</code></p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: { brand }) => {...}\n</code></pre>\n<p>Now we need to defend the brand and the brand is…. you guessed it, an object.</p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: { brand: {} }) => {...}\n</code></pre>\n<p>Now we can start defining the brand object that contains two strings, <code>name</code> and <code>to</code></p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: { brand: { name: string, to: string } }) => {...}\n</code></pre>\n<p>So that validates our brand object but now we need to validate our links, the array of the same object.</p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: {\n  brand: { name: string; to: string };\n  links: Array // Start by assigning the array\n}) => { ... };\n</code></pre>\n<p>Now we can shape the objects within the array.</p>\n<pre><code>const NavbarScroller = (props: {\n  brand: { name: string; to: string };\n  links:  Array&#x3C;{ name: string; to: string }>\n}) => { ... };\n\n// Then is pretty much the same as defining the object.\n</code></pre>\n<p>That right there is what all the <code>TypeScript</code> Hype is about. When functions know what that are expecting before hand it allows us to find bugs before they even happen and make it a lot easier to find and fix problems before they make it into production.</p>\n<p>Now lets add our Brand element</p>\n<pre><code class=\"language-js\">// NavbarScroller.tsx\nconst { brand } = props;\n// descructure object to avoid 'props.brand.to'\n\n  return (\n    &#x3C;div>\n      &#x3C;a href={brand.to}>{brand.name}&#x3C;/a>\n    &#x3C;/div>\n  )\n</code></pre>\n<p>Mapping our links.\nHere we want out type to be <code>NavLinks: any</code> because we’re returning JSX.</p>\n<pre><code class=\"language-js\">const NavLinks: any = () => links.map((link: { name: string, to: string }) => &#x3C;li key={link.name}>&#x3C;a href={link.to}>{link.name}&#x3C;/a>&#x3C;/li>);\n\nreturn (&#x3C;div>\n            &#x3C;a href={brand.to}>{brand.name}&#x3C;/a>\n            &#x3C;NavLinks />\n        &#x3C;/div>)\n</code></pre>\n<p>Finally.</p>\n<p>Lets add some <code>styled-components</code> in our  <code>NavbarScroller.tsx</code>;</p>\n<pre><code>npm install styled-components --save\n</code></pre>\n<pre><code class=\"language-js\">import * as React from 'react'\nimport styled from 'styled-components';\n\nconst NavbarScroller = (props: {\n  brand: { name: string; to: string },\n  links: Array&#x3C;{ name: string, to: string }>\n}) => {\n  const { brand, links } = props;\n  const NavLinks: any = () => links.map((link: { name: string, to: string }) => &#x3C;li key={link.name}>&#x3C;a href={link.to}>{link.name}&#x3C;/a>&#x3C;/li>);\n  return (\n    &#x3C;div>\n      &#x3C;a href={brand.to}>{brand.name}&#x3C;/a>\n      &#x3C;NavLinks />\n    &#x3C;/div>\n  )\n};\n\nexport default NavbarScroller;\n</code></pre>\n<h3>Here is the styling I used for the styled-components</h3>\n<pre><code class=\"language-js\">const Theme = {\n  colors: {\n    bg: `#fff`,\n    dark: `#24292e`,\n    light: `#EEEEEE`,\n    red: `#ff5851`,\n  },\n  fonts: {\n    body: `IBM Plex Sans, sans-serif`,\n    heading: `IBM Plex Sans, sans-serif`,\n  }\n}\n\nconst Navbar = styled.nav`\n  background: ${Theme.colors.dark};\n  font-family: ${Theme.fonts.heading};\n  color: ${Theme.colors.light};\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  a { color: white; text-decoration: none; }`;\n\nconst Brand = styled.a`\n  font-weight: bold;\n  font-style: italic;\n  margin-left: 1rem;\n  padding-right: 1rem;`;\n\nconst Ul = styled.ul`\n  display: flex;\n  flex-wrap: nowrap;\n  overflow-x: auto;\n  -webkit-overflow-scrolling: touch;`;\n\nconst Li = styled.li`\n  flex: 0 0 auto;\n  -webkit-box-align: center;\n  -webkit-box-pack: center;\n  -webkit-tap-highlight-color: transparent;\n  align-items: center;\n  color: #999;\n  height: 100%;\n  justify-content: center;\n  text-decoration: none;\n  -webkit-box-align: center;\n  -webkit-box-pack: center;\n  -webkit-tap-highlight-color: transparent;\n  align-items: center;\n  color: #999;\n  display: flex;\n  font-size: 14px;\n  height: 50px;\n  justify-content: center;\n  line-height: 16px;\n  margin: 0 10px ;\n  text-decoration: none;\n  white-space: nowrap;`;\n</code></pre>\n<p>After you create the styled-components you can go back and update your component to use them like so.</p>\n<pre><code class=\"language-js\">const NavbarScroller = (props: {\n  brand: { name: string; to: string },\n  links: Array&#x3C;{ name: string, to: string }>\n}) => {\n  const { brand, links } = props;\n  const NavLinks: any = () => links.map((link: { name: string, to: string }) => &#x3C;Li key={link.name}>&#x3C;a href={link.to}>{link.name}&#x3C;/a>&#x3C;/Li>);\n  return (\n    &#x3C;Navbar>\n      &#x3C;Brand href={brand.to}>{brand.name}&#x3C;/Brand>\n      &#x3C;Ul>\n        &#x3C;NavLinks />\n      &#x3C;/Ul>\n    &#x3C;/Navbar >\n  )\n};\n</code></pre>\n<p>There you have it!</p>\n<p>--glweems</p>\n<p><img src=\"https://raw.githubusercontent.com/gwtuts/react-navbar-scroller/master/demo.png\"></p>","frontmatter":{"date":"March 19, 2019","path":"/blog/react-navbar-scroller","title":"Simple navbar component using react, typescript, and styled-components."}}},"pageContext":{}}