import { GatsbyNode, SetFieldsOnGraphQLNodeTypeArgs, PluginOptions } from 'gatsby';
import { GraphQLString } from 'graphql';
import * as path from 'path';
import { kebabCase } from 'lodash';

export const setFieldsOnGraphQLNodeType: GatsbyNode['setFieldsOnGraphQLNodeType'] = async (
  args: SetFieldsOnGraphQLNodeTypeArgs,
  options: PluginOptions
) => {
  if (args.type.name === `MarkdownRemark`) {
    return {
      url: {
        type: GraphQLString,
        resolve: (source: any) => `https://glweems.com${source.frontmatter.path}`
      },
      disqusIdentifier: {
        type: GraphQLString,
        resolve: (source: any) => String(source.frontmatter.id)
      }
    };
  }

  // by default return empty object
  return {};
};

// Create Pages
export const createPages: GatsbyNode['createPages'] = async ({ actions: { createPage }, graphql, reporter }) => {
  const result = await graphql<Data>(`
    query CreatePagesQuery {
      posts: allMarkdownRemark(sort: { fields: frontmatter___date, order: DESC }) {
        nodes {
          frontmatter {
            path
          }
        }
      }

      designs: allDesignsYaml {
        nodes {
          slug
        }
      }

      blogTags: allMarkdownRemark(limit: 2000) {
        group(field: frontmatter___tags) {
          tag: fieldValue
        }
      }

      designTags: allDesignsYaml(limit: 2000) {
        group(field: tags) {
          tag: fieldValue
        }
      }

      sideProjectTags: allSideprojectsYaml(limit: 2000) {
        group(field: tags) {
          tag: fieldValue
        }
      }
    }
  `);

  // Handle errors
  if (result.errors) {
    reporter.panicOnBuild(`Error while running GraphQL query.`);
    return;
  }

  // Create Blog Posts
  const blogPosts = result?.data?.posts.nodes;

  blogPosts?.forEach(({ frontmatter }, index) => {
    createPage({
      path: frontmatter.path,
      component: path.resolve(`src/templates/BlogPost/BlogPostTemplate.tsx`),
      context: {
        slug: frontmatter.path,
        prev: blogPosts[index - 1] && blogPosts[index - 1].frontmatter.path,
        next: blogPosts[index + 1] && blogPosts[index + 1].frontmatter.path
      }
    });
  });

  // Create Design Pages
  const designs = result?.data?.designs?.nodes;

  designs?.forEach(({ slug }, index) => {
    createPage({
      path: `/${slug}`,
      component: path.resolve(`src/templates/Design/DesignTemplate.tsx`),
      context: {
        slug: `/${slug}/`,
        prev: designs[index - 1] && designs[index - 1].slug,
        next: designs[index + 1] && designs[index + 1].slug
      }
    });
  });

  /*
   * Tag Pages
   */

  // Extract tag data from query

  const blogTags = result?.data?.blogTags;
  const designTags = result?.data?.designTags;
  const sideProjectTags = result?.data?.sideProjectTags;
  const grouped: Group[] = [
    ...(blogTags?.group as Group[]),
    ...(designTags?.group as Group[]),
    ...(sideProjectTags?.group as Group[])
  ];
  // Combine all tags
  const tags: any = grouped.reduce((acc: any[], d) => {
    const found = (acc as any).find((a: any) => a.tag === d.tag) as Group;

    if (found) {
      found.tag = kebabCase(found.tag);
    }
    (acc as any).push({ tag: kebabCase(d.tag), qty: (d as any).qty });

    return acc;
  }, []);

  // Component for each page
  // Make tag pages
  tags.forEach(({ tag }: Group) => {
    createPage({
      path: `/tags/${kebabCase(tag)}/`,
      component: path.resolve(`src/templates/Tags/TagsTemplate.tsx`),
      context: { tag }
    });
  });
};

// Generated by https://quicktype.io

export interface Results {
  data: Data;
}

export interface Data {
  posts: Posts;
  designs: Designs;
  blogTags: Tags;
  designTags: Tags;
  sideProjectTags: Tags;
}

export interface Tags {
  group: Group[];
}

export interface Group {
  tag: string;
}

export interface Designs {
  nodes: DesignsNode[];
}

export interface DesignsNode {
  slug: string;
}

export interface Posts {
  nodes: PostsNode[];
}

export interface PostsNode {
  frontmatter: Frontmatter;
}

export interface Frontmatter {
  path: string;
}
