{"expireTime":9007200807937665000,"key":"transformer-remark-markdown-html-1c18e7bd2ca8fd6ccdd54e0fbaa1a9a8--","val":"<h1>React auto-hide on scroll navbar.</h1>\n<p><img src=\"https://raw.githubusercontent.com/gwtuts/react-peekaboo-navbar/master/demo.gif\"></p>\n<hr>\n<p><img src=\"https://avatars2.githubusercontent.com/u/48597129?s=100&#x26;u=975926e0bc8d1da9ae020e4af5925862682e516c&#x26;v=4\" title=\"gwtuts\"></p>\n<p align=\"center\">\n  <a href=\"https://react-peekaboo-navbar.gwtuts.com\">Demo</a>\n  ·\n  <a href=\"https://github.com/gwtuts/react-peekaboo-navbar\">GitHub Repo</a>\n</p>\n<hr>\n<p>This will create a react-component <code>Navbar</code> that will be hidden when the user scrolls down and visible when the user scrolls up.</p>\n<h4>Dependencies</h4>\n<ul>\n<li>styled-components</li>\n</ul>\n<pre><code>npm install styled-components --save\n</code></pre>\n<p>In your <code>App.js</code> create the following constants;</p>\n<pre><code class=\"language-js\">// App.js\nimport Navbar from \"./Navbar\";\n\nconst navlinks = [\n  { name: \"Home\", to: \"/\" },\n  { name: \"About\", to: \"/about\" },\n  { name: \"Contact\", to: \"/contact\" }\n];\n\nconst brand = { name: \"peekaboo\", to: \"home\" };\n\nexport default class App extends Component {\n  render() {\n    return (\n      &#x3C;div className=\"App\">\n        &#x3C;Navbar brand={brand} links={navlinks} />\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<p>In your <code>src/</code> folder create a <code>Navbar.js</code> file</p>\n<pre><code class=\"language-js\">export default class Navbar extends Component {\n  static propTypes = {...}\n\n  constructor(props) {...}\n\n  componentDidMount() {...}\n\n  componentWillUnmount() {...}\n\n  handleScroll() {...}\n\n  render() {\n\n    return (\n      &#x3C;div>\n      ...\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<p>Let’s start with mapping our props to be as elements to be rendered on the page.</p>\n<pre><code class=\"language-js\">// Navbar.js\nrender() {\n  const { brand, links } = this.props;\n\n  const NavLinks = () =>\n    links.map((link, index) => (\n      &#x3C;a key={index} href={link.to}>\n        {link.name}\n      &#x3C;/a>\n    ));\n\n  return (\n    &#x3C;div>\n        &#x3C;a className=\"brand\" href={brand}> {brand} &#x3C;/a>\n        &#x3C;nav>\n          &#x3C;NavLinks />\n        &#x3C;/nav>\n      &#x3C;/div>\n  );\n}\n</code></pre>\n<p>Now let’s go ahead and add some validation to our props with <code>PropTypes</code>.</p>\n<pre><code>import PropTypes from \"prop-types\";\n//...\n\nexport default class Navbar extends Component {\n  static propTypes = {\n    brand: PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      to: PropTypes.string.isRequired\n    }),\n    links: PropTypes.arrayOf(\n      PropTypes.shape({\n        name: PropTypes.string.isRequired,\n        to: PropTypes.string.isRequired\n      })\n    )\n  };\n}\n</code></pre>\n<p>For our constructor we need to add</p>\n<pre><code class=\"language-js\">constructor(props) {\n    super(props);\n    this.state = {\n      show: true,\n      scrollPos: 0\n    };\n    this.handleScroll = this.handleScroll.bind(this);\n  }\n</code></pre>\n<p>We need to set the event listener after the component mounts.</p>\n<pre><code class=\"language-js\">componentDidMount() {\n  window.addEventListener(\"scroll\", this.handleScroll);\n}\n\ncomponentWillUnmount() {\n  window.removeEventListener(\"scroll\", this.handleScroll);\n}\n</code></pre>\n<p>Now that we have a function attached to the scroll event we can set the function that will fire.</p>\n<pre><code class=\"language-js\">handleScroll() {\n    const { scrollPos } = this.state;\n    this.setState({\n      scrollPos: document.body.getBoundingClientRect().top,\n      show: document.body.getBoundingClientRect().top > scrollPos\n    });\n  }\n</code></pre>\n<p>Now our <code>show</code> property in the state object will show <strong>true</strong> if we’re scrolling up and <strong>false</strong> if we’re scrolling up.</p>\n<p>We can use a Conditional Operator on our div’s class name to toggle between <code>\"active\"</code> and <code>\"hidden\"</code></p>\n<pre><code class=\"language-js\">render() {\n  return &#x3C;div className={this.state.show ? \"active\" : \"hidden\"} />;\n}\n</code></pre>\n<p>Toggle between those two classes won’t do anything until we define them in our css. For that we are going to create a <em>styled-component</em>\nReplace the <code>div</code> element with our new styled-component.</p>\n<pre><code class=\"language-js\">import styled from \"styled-components\";\n\nrender() {\n...\nreturn (\n    &#x3C;StyledNavbar className={this.state.show ? \"active\" : \"hidden\"}>\n    ...\n    &#x3C;/StyledNavbar>\n  );\n}\n\nconst StyledNavbar = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  margin: 0 auto;\n  height: 3rem;\n  display: flex;\n  flex-direction: row;\n  justify-content: space-between;\n  align-items: center;\n  font-weight: bolder;\n  background: cornflowerblue;\n  z-index: 1000;\n  a {\n    margin-right: 1rem;\n    font-weight: normal;\n  }\n  .brand {\n    font-style: italic;\n    margin-left: 1rem;\n    font-weight: bold;\n    color: white;\n    font-size: 1.25rem;\n  }`;\n</code></pre>\n<p>Now we’re going to create a <code>Transition</code> component that will wrap our <code>StyledNavbar</code>component.</p>\n<pre><code class=\"language-js\">render() {\n    return (\n      &#x3C;Transition>\n        &#x3C;StyledNavbar className={this.state.show ? \"active\" : \"hidden\"}>\n        ...\n        &#x3C;/StyledNavbar>\n      &#x3C;/Transition>\n    );\n  }\n\nconst Transition = styled.div`\n  .active {\n    visibility: visible;\n    transition: all 200ms ease-in;\n  }\n  .hidden {\n    visibility: hidden;\n    transition: all 200ms ease-out;\n    transform: translate(0, -100%);\n  }\n`;\n</code></pre>\n<p>There you have it!</p>"}