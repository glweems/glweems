import { useStaticQuery, graphql } from 'gatsby'
import { FluidObject } from 'gatsby-image'

export default function useDesignsQuery(): Design[] {
  const { projects, images }: Query = useStaticQuery(graphql`
    query DesignsQuery {
      projects: allDesignsYaml {
        nodes {
          slug
          name
          description
          tags
        }
      }
      images: allFile(filter: { sourceInstanceName: { eq: "designs" }, name: { eq: "cover" } }) {
        nodes {
          id
          name
          relativeDirectory
          childImageSharp {
            fluid {
              base64
              tracedSVG
              srcWebp
              srcSetWebp
              originalImg
              originalName
              aspectRatio
              sizes
              presentationWidth
              presentationHeight
              src
              srcSet
            }
          }
        }
      }
    }
  `)

  return projects.nodes.map(project => {
    return { ...project, ...images.nodes.find(image => image.relativeDirectory === project.slug) } as Design
  })
}
// Generated by https://quicktype.io

export interface Query {
  projects: Projects
  images: Images
}

export interface Images {
  nodes: ImagesNode[]
}

export interface ImagesNode {
  id: string
  name: Name
  relativeDirectory: string
  childImageSharp: {
    fluid: FluidObject
  }
}

export enum Name {
  Cover = 'cover'
}

export interface Projects {
  nodes: ProjectsNode[]
}

export interface ProjectsNode {
  slug: string
  name: string
  description: string
  tags: string[]
}

type Design = ProjectsNode & ImagesNode
